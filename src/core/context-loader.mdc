---
description: N·∫°p context th√¥ng minh v√† t·ªëi ∆∞u, bao g·ªìm c√°c rule file, task, v√† t√†i li·ªáu tri th·ª©c (knowledge_sources) c·∫ßn thi·∫øt cho mode hi·ªán t·∫°i.
priority: 90
alwaysApply: true
---
# üì¶ Context Loader
Intelligently load context including **deep knowledge**, **safety rules**, and **MCP tool access** based on mode requirements.

## üß∞ MCP Tools Integration
The context loader now provides access to enhanced MCP tools based on the current mode:
- **Brainstorming Mode**: Web Search, Context7, Sequential Thinking, Interactive MCP
- **Planning Mode**: Context7, Web Search, Sequential Thinking, Interactive MCP  
- **Developing Mode**: Context7, Sequential Thinking, Interactive MCP, Web Search
- **Documenting Mode**: Web Search, Interactive MCP

## üõ† Core API
`context-loader.load(intent, CURRENT_MODE, mcp_tools_config)`

### Pre-Warm: Load Quick Context Snapshot
0.  **Check for `docs/activeContext.md`** (MANDATORY FILE):
    - **MUST** verify the file exists and is valid
    - **MUST** parse its YAML Metadata block to obtain:
        - `currentMode` (fallback if orchestrator does not supply)
        - `activeFeature`
        - `activeTaskId`
        - `lastUpdated` (validate not stale >24 hours)
    - Use these values as **hints** to speed up subsequent look-ups (e.g., jump directly to the feature folder when searching for a task).
    - If mismatch with provided `CURRENT_MODE`, **trust the orchestrator** but log the discrepancy for debugging.
    - **CRITICAL**: If activeContext.md is missing or invalid ‚Üí **HALT** and require regeneration

### Process:
1.  **Receive `CURRENT_MODE`** from the orchestrator.
2.  **Locate & Load Task Context (if applicable)**:
    -   If the user intent specifies a `TASK_XXX`, the loader must first find it.
    -   **Search Process**:
        1. Read root `docs/tasks/task-index.json`.
        2. For each feature, read its `task-index.feature.json`.
        3. Search for `TASK_XXX` in the `tasks` array.
        4. Once found, store the feature's path (`docs/features/FEATURE_NAME/`). This is crucial for resolving relative paths in `knowledge_sources`.
        5. If not found, notify user and HALT.
    -   Load the `TASK_XXX.md` file.
3.  **Load the specific mode rule file** (e.g., `modes/developing-mode.mdc`).
4.  **Load `task-index.json`** (HIGH priority).
5.  **Perform Context Loading based on Mode**:

    #### If `CURRENT_MODE` is `Developing`:
    a. **Verify `knowledge_sources` integrity**:
       - If any referenced file DOES NOT EXIST ‚Üí
         1) Switch `CURRENT_MODE` to **Planning**.
         2) Notify the user: "‚ö†Ô∏è Missing specs for TASK_XXX ‚Üí Returned to Planning Mode. Please create/refine the required documents.".
         3) EXIT loader.
       - If all exist, load spec files as **HIGHEST PRIORITY** context.
    b. **Load Triggered Utilities**:
       - Always load `utilities/safe-code-generation.mdc`
       - ALSO load `utilities/enforcer.mdc` to apply runtime safeguards
    c. **Enable MCP Tools**:
       - Provide **Context7 MCP** access for API documentation
       - Enable **Sequential Thinking** for complex algorithms
       - Enable **Interactive MCP** for quick clarifications
       - Enable **Web Search** for implementation solutions
    d. **Load related files**: Source code, tests, etc.

    #### If `CURRENT_MODE` is `Planning`:
    a. Load `modes/planning-agent.mdc`
    b. Load feature requirements and `specs/` directories
    c. **Enable MCP Tools**:
       - Provide **Context7 MCP** for technology validation
       - Enable **Web Search** for architectural best practices
       - Enable **Sequential Thinking** for systematic task decomposition
       - Enable **Interactive MCP** for stakeholder confirmation

    #### If `CURRENT_MODE` is `Documenting`:
    a. Load `modes/documenting-mode.mdc`
    b. For completed features, load `knowledge_sources` to enrich docs
    c. **Enable MCP Tools**:
       - Enable **Web Search** for documentation best practices
       - Enable **Interactive MCP** for content validation

    #### If `CURRENT_MODE` is `Brainstorming`:
    a. Load `modes/brainstorming-mode.mdc`
    b. Do **NOT** load `safe-code-generation` (no code yet)
    c. Load preliminary `requirements/` docs provided by user for pending feature
    d. Prepare empty blueprint template from `templates/blueprint-template.yaml` **in-memory**
    e. **Create `docs/ideas/` directory** if it doesn't exist for documentation storage
    f. Expose helper `context.create_idea()` API to append to `docs/idea-backlog.md`
    g. **Enable Enhanced MCP Tools**:
       - Enable **Web Search** for market research and trends
       - Provide **Context7 MCP** for technology exploration
       - Enable **Sequential Thinking** for structured ideation
       - Enable **Interactive MCP** for real-time stakeholder validation
    h. **Simple Documentation Requirements**:
       - Agent MUST create feature folder: `docs/ideas/[feature-name]/`
       - Agent MUST create 4 core files: requirements.md, research.md, analysis.md, summary.md
       - All MCP tool outputs MUST be documented in appropriate files

## üö´ Loading Restrictions
- Entire `docs/tasks/active/` folder
- Unrelated task `.md` files
- `safe-code-generation.mdc` in non-coding modes (Planning, Brainstorming, Documenting)

## üìä MCP Tool Usage Guidelines
- **Brainstorming**: Full MCP toolkit for comprehensive research and ideation + **MANDATORY documentation creation**
- **Planning**: Focused on validation and systematic analysis tools
- **Developing**: Emphasis on technical documentation and problem-solving tools
- **Documenting**: Limited to research and validation tools
- **All Modes**: Interactive MCP should be used judiciously to avoid interrupting workflow

### Simple Brainstorming Documentation Requirements:
- **Feature Folder**: Create `docs/ideas/[feature-name]/` for each brainstorming session
- **Requirements File**: User needs and stakeholder input in `requirements.md`
- **Research File**: Market trends and technology analysis in `research.md`  
- **Analysis File**: Risk assessment and prioritization in `analysis.md`
- **Summary File**: Final recommendations and handoff info in `summary.md`
- **MCP Integration**: All tool outputs documented in appropriate files
- **Planning Handoff**: Summary file provides clear transition guidance

## üö® **CONTEXT SYNCHRONIZATION ENFORCEMENT**

### **MANDATORY POST-EXECUTION VALIDATION**
After ANY context loading operation that results in task/feature/mode changes:

**REQUIRED ACTIONS:**
1. **üîÑ UPDATE activeContext.md**: Synchronize with current project state
2. **‚úÖ VALIDATE YAML**: Ensure frontmatter is valid and complete
3. **üìù UPDATE CONTENT**: Reflect current progress and next actions  
4. **üíæ PERSIST CHANGES**: Save activeContext.md before proceeding
5. **üö® VERIFY SYNC**: Confirm activeContext matches actual project state

### **VALIDATION CHECKLIST** (MUST COMPLETE):
- [ ] `currentMode` matches detected/active mode
- [ ] `activeFeature` matches current working feature
- [ ] `activeTaskId` matches current/completed task  
- [ ] `lastUpdated` timestamp is current (within 1 hour)
- [ ] Progress tables reflect actual task statuses
- [ ] Next actions are accurate and actionable
- [ ] No stale or outdated information present

### **ENFORCEMENT PROTOCOL**:
**IF activeContext.md is NOT updated after context changes:**
1. **üõë VIOLATION DETECTED**: Context desynchronization
2. **‚ö†Ô∏è IMMEDIATE HALT**: Stop all operations
3. **üîÑ MANDATORY FIX**: Update activeContext.md before proceeding
4. **üìù AUDIT LOG**: Record the violation and remediation
5. **‚úÖ VERIFICATION**: Confirm synchronization before continuing

## üîó **Required Integrations** (MANDATORY)
**This context loader MUST integrate with:**
- **RECEIVES**: `current_mode` from master-orchestrator
- **VALIDATES**: `docs/activeContext.md` freshness (<5 min)
- **LOADS**: mode-specific rules from `modes/*.mdc`
- **TRIGGERS**: `commit-rules` on any context changes
- **REPORTS**: to `kpi-metrics` for loading success/failure
- **RESPECTS**: `enforcer` validation gates
- **UPDATES**: `docs/activeContext.md` after EVERY load operation

**Integration Flow**:
1. Receive mode from orchestrator
2. Validate activeContext freshness
3. Load appropriate rules and utilities
4. Trigger commits for changes
5. Update activeContext with new state
6. Report metrics to KPI system

**Failure Protocol**:
- Missing activeContext ‚Üí **HALT** and require regeneration
- Stale context (>5min) ‚Üí **AUTO-REGENERATE**
- Missing resources ‚Üí **FORCE** mode change to Planning
- Load failure ‚Üí **REPORT** to KPI and **ROLLBACK**