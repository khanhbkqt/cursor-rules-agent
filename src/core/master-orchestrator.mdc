---
description: Orchestrate the entire workflow by **determining a single active mode** based on the project state.
priority: 95
alwaysApply: true
---
# üß≠ Master Orchestrator (v4 - Deterministic)
Orchestrate the entire workflow by **determining a single active mode** based on the project state.

## ü§ñ **Mode Detection Logic (Distributed)**
**Pre-Check**: If `docs/activeContext.md` exists **AND** has a non-empty `currentMode` field, temporarily set `CURRENT_MODE = activeContext.currentMode` **unless** overridden by higher-priority triggers (critical bugs, explicit user command, missing structure, etc.). Then continue evaluation to confirm or override.

### 0. Check for `Brainstorming` Mode (Manual, Ideas, or Pending Blueprint)
*   `IF` the user explicitly starts a brainstorming session (command contains the keyword `brainstorm` **OR**
    the shared `orchestrator_state.brainstorm_requested` flag is `true`) **OR**
*   `IF` a user requests feature analysis without existing documentation **OR**
*   `IF` incomplete brainstorming session exists (folder `docs/ideas/[feature-name]/` exists but missing `summary.md` or status not "Ready for Planning Mode") **OR**
*   `IF` a feature directory exists in `docs/features/*/requirements/` **BUT**
    there is **no** corresponding blueprint file in `docs/blueprints/*.blueprint.yaml` **AND**
    the root `docs/tasks/task-index.json` does **NOT** yet list tasks for that feature:
    *   `THEN` **CURRENT_MODE = Brainstorming**. Exit detection.

### 1. Check for `Initializing` Mode
-   `IF` `docs/tasks/task-index.json` does not exist:
-   `THEN` **CURRENT_MODE = Initializing**. Exit detection.

### 2. Check for `Developing` Mode
-   `READ` root `docs/tasks/task-index.json`.
-   **`FOR EACH`** feature in `features` array:
    -   `READ` the feature-specific index file from `feature.path`.
    -   `IF` any task has `status: "approved"` OR `status: "developing"`:
        -   `THEN` **CURRENT_MODE = Developing**. Exit detection.

### 3. Check for `Documenting` Mode
-   `READ` root `docs/tasks/task-index.json`.
-   **`FOR EACH`** feature in `features` array:
    -   `READ` the feature-specific index file from `feature.path`.
    -   `IF` any task has `status: "done"` OR `status: "review"` AND docs are out-of-sync:
        -   `THEN` **CURRENT_MODE = Documenting**. Exit detection.

### 1.5 Check for `Bug-Fixing` Mode
-   `READ` root `bugs/bug-index.json` **IF EXISTS**.
-   `IF` any bug has `severity` = `critical` or `blocker` **AND** `status` in `open | in-progress`:
    -   `THEN` **CURRENT_MODE = Bug-Fixing**. Exit detection.
-   `ELSE IF` the current runtime detects failing tests classified as critical (e.g., app crash) **OR** user explicitly types `fix bug` / `hotfix`:
    -   `THEN` **CURRENT_MODE = Bug-Fixing**. Exit detection.

### 4. Default to `Planning` Mode
-   `IF` none of the above conditions are met:
-   `THEN` **CURRENT_MODE = Planning**. This is the default state for a ready project with no active tasks.

## üõ† **MANDATORY Core Workflow (STRICTLY ENFORCED)**
üö® **CRITICAL**: ALL steps are REQUIRED. Skipping ANY step violates the orchestrator protocol.

### **STEP-BY-STEP CHECKLIST (MUST COMPLETE ALL):**

#### **1. üîç DETERMINE CURRENT_MODE** (REQUIRED)
- [ ] **MUST** execute Mode Detection Logic above
- [ ] **MUST** verify mode is valid (Brainstorming, Initializing, Developing, Documenting, Bug-Fixing, Planning)
- [ ] **MUST** log determined mode for audit trail

#### **2. üì¶ LOAD CONTEXT** (REQUIRED) 
- [ ] **MUST** call `context-loader.load(intent, CURRENT_MODE, mcp_tools_config)`
- [ ] **MUST** verify all required rules and utilities are loaded
- [ ] **MUST** validate context completeness before proceeding

#### **3. ‚ö° EXECUTE** (REQUIRED)
- [ ] **MUST** execute user request within the determined mode context
- [ ] **MUST** follow mode-specific rules and constraints
- [ ] **MUST** use only mode-appropriate tools and utilities

#### **4. üìä UPDATE PROGRESS** (REQUIRED)
- [ ] **MUST** update `task-index.json` if task status changes
- [ ] **MUST** update feature-specific `task-index.feature.json` files
- [ ] **MUST** update task `.md` files with progress and work logs
- [ ] **MUST** commit changes following `utilities/commit-rules.mdc`

#### **5. üìù WRITE ACTIVE CONTEXT** (üö® **MANDATORY** üö®)
**THIS STEP IS CRITICAL AND MUST NEVER BE SKIPPED**
- [ ] **SHALL** regenerate `docs/activeContext.md` from current project state
- [ ] **SHALL** update YAML frontmatter with current values:
  - [ ] `currentMode`: Current determined mode
  - [ ] `activeFeature`: Current feature being worked on  
  - [ ] `activeTaskId`: Current/last completed task ID
  - [ ] `lastUpdated`: Current timestamp (ISO format)
  - [ ] `projectName`: Project identifier
- [ ] **SHALL** update content sections with current progress
- [ ] **SHALL** update next action recommendations
- [ ] **SHALL** validate activeContext.md syntax and completeness

#### **6. üîÑ TRANSITION** (CONDITIONAL)
- [ ] **MUST** evaluate if mode transition is needed based on new state
- [ ] **MUST** prepare state for next orchestrator cycle if transitioning
- [ ] **MUST** log any mode transitions for audit trail

### üö® **ENFORCEMENT PROTOCOL**
**VIOLATION DETECTION**: If ANY step is skipped or incomplete:
1. **üõë IMMEDIATE HALT**: Stop all operations
2. **‚ö†Ô∏è VIOLATION ALERT**: Report which step was skipped
3. **üîÑ REMEDIATION**: Complete the skipped step before proceeding
4. **üìù AUDIT LOG**: Record the violation and remediation

### ‚úÖ **COMPLETION VERIFICATION**
Before reporting results to user, **VERIFY ALL CHECKBOXES ARE COMPLETE**:
- [ ] All 6 workflow steps completed
- [ ] All required files updated
- [ ] `docs/activeContext.md` reflects current state
- [ ] Changes committed per commit rules
- [ ] No violations detected

## üîÑ Mode Transition Philosophy
**Modes are flexible workflows, NOT linear cycles.**

### Dynamic Transitions:
- **Developing ‚Üí Planning**: When user requests a new feature, or detects a need for spec updates
- **Planning ‚Üí Developing**: When blueprint is ready and user starts a task
- **Developing ‚Üí Documenting**: When a task is completed and docs need updating
- **Documenting ‚Üí Planning**: When writing docs detects gaps in requirements
- **Any Mode ‚Üí Initializing**: When project structure is broken or reset

### Triggers for Mode Changes:
1. **User explicit request**: "Plan new feature X", "Start coding TASK_Y"
2. **Project state changes**: Task status updates, missing files, blueprint approvals
3. **Validation failures**: Missing specs ‚Üí back to Planning, incomplete tests ‚Üí stay in Developing
4. **Context requirements**: Need different utilities/rules for current work

## üîí Enforcement
- Prohibit code generation if blueprint is not Gate 1.
- Prohibit marking task complete if tests/docs are missing.
- Violation ‚áí warn & auto-switch to appropriate mode.
Detailed in `utilities/enforcer.mdc`

## üìÇ Mode-Specific Rules Mapping
Each mode MUST load its corresponding rule file:
- **Initializing Mode** ‚Üí `modes/initializing-mode.mdc`
- **Planning Mode** ‚Üí `modes/planning-agent.mdc`  
- **Developing Mode** ‚Üí `modes/developing-mode.mdc`
- **Documenting Mode** ‚Üí `modes/documenting-mode.mdc`
- **Bug-Fixing Mode** ‚Üí `modes/bug-fixing-mode.mdc`
- **Brainstorming Mode** ‚Üí `modes/brainstorming-mode.mdc`

The `context-loader` is responsible for loading these based on `CURRENT_MODE`. These mode files contain:
- Specific behaviors and constraints for that mode
- Required utilities to trigger-load
- Output format guidelines
- Transition criteria

## üìè Documentation Freshness Heuristic
For a given feature, docs are considered **out-of-sync** when **any** source code file under that feature's directory tree has a last-modified timestamp newer than the most recent `.md` file in `docs/features/<feature>/`.

Implementation sketch:
```
latest_code_time = max(mtime of src/** for feature)
latest_doc_time  = max(mtime of docs/features/<feature>/**/*.md)
return latest_code_time > latest_doc_time
```

## üîÑ Auto-Transition: `proposed` ‚Üí `developing`
Before executing user intent that references a task in `proposed` status:
1. Verify task's `knowledge_sources` exist (context-loader handles this).
2. If valid, update status to `developing` **and persist** in `task-index.json`.
3. Log the transition for audit.
4. If missing specs, remain in Planning; context-loader already notifies user.

## üîó **Required Integrations** (MANDATORY)
**This orchestrator MUST integrate with:**
- **MUST call**: `context-loader.load(intent, CURRENT_MODE, mcp_tools_config)` (Step 2)
- **MUST read**: `docs/activeContext.md` for initial state and validation
- **MUST update**: `docs/activeContext.md` after EVERY operation (Step 5)
- **MUST check**: `kpi-metrics.compliance()` before responding to user
- **MUST respect**: `enforcer.validate()` for all mode transitions
- **MUST trigger**: `commit-rules` auto-commit on status changes
- **REPORTS to**: `kpi-metrics` for all violations and completions

**Cross-Reference Verification**:
- If ANY integration fails ‚Üí **HALT** and remediate
- All components form a circular verification loop
- Final state MUST match initial intent